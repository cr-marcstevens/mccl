#include <mccl/algorithm/lowweight_generic.hpp>
#include <mccl/core/matrix_algorithms.hpp>

MCCL_BEGIN_NAMESPACE

template class lowweight_generic<subISDT_API,64>;
template class lowweight_generic<subISDT_API,128>;
template class lowweight_generic<subISDT_API,256>;
template class lowweight_generic<subISDT_API,512>;

lowweight_generic_config_t lowweight_generic_config_default;

bool check_LWS_solution(const cmat_view& G, unsigned int w, const cvec_view& E)
{
    if (E.columns() != G.columns())
        throw std::runtime_error("check_LWS_solution(): G and E do not have matching dimensions");
    // first check if weight of E is less or equal to w
    if (hammingweight(E) > w)
        return false;
    // now check if E belongs to the code generated by G
    mat Gtmp; Gtmp.resize(G.rows()+1, G.columns());
    Gtmp.m_copy(G);
    Gtmp[G.rows()].v_copy(E);
    auto pivot = echelonize(Gtmp.submatrix(0, G.rows()), G.columns() - G.rows());
    // check if G is a full rank generator matrix
    if (pivot != G.rows())
        return false;
    // reduce E with G
    echelonize(Gtmp, G.columns() - G.rows());
    if (Gtmp[G.rows()].hw() == 0)
        return true;
    return false;
}

bool lowweight_search_problem::check_solution(const cvec_view& E) const
{
    return check_LWS_solution(G, w, E);
}

MCCL_END_NAMESPACE
